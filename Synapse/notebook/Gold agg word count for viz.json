{
	"name": "Gold agg word count for viz",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6712e2c7-b8fc-46f5-8080-e13604613954"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"CREATE TABLE IF NOT EXISTS delta.`abfss://github-realtime-issue@team13adls.dfs.core.windows.net/gold/agg_wordcount`\n",
					"USING DELTA\n",
					"COMMENT 'Aggrated word count for different labels'\n",
					"AS (\n",
					"  WITH word_array AS (\n",
					"    SELECT\n",
					"      issue_resolve_time_label,\n",
					"      SPLIT(issue_title, ' ') AS word_arr\n",
					"    FROM delta.`abfss://github-realtime-issue@team13adls.dfs.core.windows.net/gold/viz_issues_event`\n",
					"    WHERE issue_resolve_time_label IS NOT NULL\n",
					"  ),\n",
					"  all_words as (\n",
					"    SELECT\n",
					"      issue_resolve_time_label,\n",
					"      word,\n",
					"      COUNT(word) AS ct\n",
					"    FROM word_array\n",
					"    LATERAL VIEW EXPLODE(word_arr) AS word\n",
					"    GROUP BY issue_resolve_time_label, word\n",
					"  )\n",
					"  SELECT\n",
					"    issue_resolve_time_label,\n",
					"    word,\n",
					"    ct\n",
					"  FROM (\n",
					"    SELECT\n",
					"      *,\n",
					"      ROW_NUMBER() OVER (PARTITION BY issue_resolve_time_label ORDER BY ct DESC) AS rk\n",
					"    FROM all_words\n",
					"  ) ranked\n",
					"  WHERE rk <= 1000\n",
					"  ORDER BY 1,3 DESC \n",
					")"
				],
				"execution_count": null
			}
		]
	}
}