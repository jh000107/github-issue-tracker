{
	"name": "ML Data Preprocessing",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "team13",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "af24580f-087b-4c7e-9dc3-ecf1797869e1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/3b608a14-90b7-42d9-82e2-77c947974137/resourceGroups/DS562-Team-13/providers/Microsoft.Synapse/workspaces/team13-github-realtime-events/bigDataPools/team13",
				"name": "team13",
				"type": "Spark",
				"endpoint": "https://team13-github-realtime-events.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/team13",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col, concat_ws"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account_name = \"team13adls\"\n",
					"container_name = \"github-realtime-issue\"\n",
					"dataset_path = \"gold/viz_issues_event/event_month=*/\"\n",
					"\n",
					"adls_path = f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{dataset_path}\"\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"df = spark.read.parquet(adls_path)\n",
					"\n",
					"df.printSchema()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"# Combine issue_title and issue_body into one column\n",
					"df = df.withColumn(\"text\", concat_ws(\" \", col(\"issue_title\"), col(\"issue_body\")))\n",
					"\n",
					"# Drop nulls in text and label\n",
					"df = df.dropna(subset=[\"text\", \"issue_resolve_time_label\"])\n",
					"\n",
					"# Select only what we need\n",
					"df_clean = df.select(\"text\", \"issue_resolve_time_label\")\n",
					"\n",
					"# Sample 1% of the data\n",
					"df_sample = df_clean.sample(fraction=0.01, seed=42)\n",
					"\n",
					"print(f\"Sample size: {df_sample.count()} rows\")\n",
					"\n",
					"# Write the sample to gold layer as training data\n",
					"output_path = f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/gold/training_data/\"\n",
					"df_sample.write.mode(\"overwrite\").option(\"header\", True).csv(output_path)\n",
					"\n",
					"print(\"Sampled training data saved to gold layer.\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}